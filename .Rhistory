params$attrfilter <- filter
cat("Trying with filter:", filter, "\n")
response <- GET(base_url, query = params)
content <- content(response, "text", encoding = "UTF-8")
cat("Response:", substr(content, 1, 100), "...\n\n")
}
}
# Usage
api_key <- Sys.getenv("VWORLD_API_KEY")
sgg_name <- "속초시"
debug_sgg_request(api_key, sgg_name)
library(httr)
library(jsonlite)
get_sgg_polygon <- function(api_key, sgg_name, debug = FALSE) {
base_url <- "http://api.vworld.kr/req/data"
params <- list(
key = api_key,
domain = "http://localhost:8080",  # 변경된 도메인
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 1000,
page = 1,
data = "LT_C_ADSIGG_INFO",
geometry = "true",
attribute = "true",
crs = "EPSG:3857",  # 좌표계 변경
geomfilter = "BOX(13663271.680031825,3894007.9689600193,14817776.555251127,4688953.0631258525)",  # 범위 확장
attrfilter = paste0("sig_kor_nm:like:", URLencode(sgg_name))
)
if(debug) cat("Full URL:", modify_url(base_url, query = params), "\n\n")
response <- GET(base_url, query = params)
if(debug) {
cat("Status code:", status_code(response), "\n")
cat("Headers:", toJSON(headers(response), auto_unbox = TRUE), "\n\n")
}
content <- content(response, "text", encoding = "UTF-8")
if(debug) cat("Response content:", substr(content, 1, 500), "...\n\n")
data <- fromJSON(content, simplifyVector = FALSE)
if(data$response$status == "OK") {
features <- data$response$result$featureCollection$features
if(length(features) > 0) {
return(features)
} else {
cat("No features found for the given sgg_name.\n")
}
} else {
cat("API returned status:", data$response$status, "\n")
cat("Error message:", data$response$error$text, "\n")
}
return(NULL)
}
# Usage
api_key <- Sys.getenv("VWORLD_API_KEY")
sgg_name <- "속초시"
result <- get_sgg_polygon(api_key, sgg_name, debug = TRUE)
if(!is.null(result)) {
print(result)
} else {
cat("Failed to retrieve data for", sgg_name, "\n")
# Try with a different sgg_name
sgg_name <- "서울특별시"
cat("Trying with", sgg_name, "\n")
result <- get_sgg_polygon(api_key, sgg_name, debug = TRUE)
if(!is.null(result)) {
print(result)
} else {
cat("Still failed to retrieve data. Please check your API key and parameters.\n")
}
}
get_sgg_polygon <- function(api_key, sgg_name, debug = FALSE) {
base_url <- "http://api.vworld.kr/req/data"
params <- list(
key = api_key,
domain = "https://r2bit.com/BitStat2",  # 변경된 도메인
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 1000,
page = 1,
data = "LT_C_ADSIGG_INFO",
geometry = "true",
attribute = "true",
crs = "EPSG:3857",  # 좌표계 변경
geomfilter = "BOX(13663271.680031825,3894007.9689600193,14817776.555251127,4688953.0631258525)",  # 범위 확장
attrfilter = paste0("sig_kor_nm:like:", URLencode(sgg_name))
)
if(debug) cat("Full URL:", modify_url(base_url, query = params), "\n\n")
response <- GET(base_url, query = params)
if(debug) {
cat("Status code:", status_code(response), "\n")
cat("Headers:", toJSON(headers(response), auto_unbox = TRUE), "\n\n")
}
content <- content(response, "text", encoding = "UTF-8")
if(debug) cat("Response content:", substr(content, 1, 500), "...\n\n")
data <- fromJSON(content, simplifyVector = FALSE)
if(data$response$status == "OK") {
features <- data$response$result$featureCollection$features
if(length(features) > 0) {
return(features)
} else {
cat("No features found for the given sgg_name.\n")
}
} else {
cat("API returned status:", data$response$status, "\n")
cat("Error message:", data$response$error$text, "\n")
}
return(NULL)
}
# Usage
api_key <- Sys.getenv("VWORLD_API_KEY")
sgg_name <- "속초시"
result <- get_sgg_polygon(api_key, sgg_name, debug = TRUE)
result
params <- list(
key = api_key,
domain = "https://r2bit.com/BitStat2",
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 1000,
page = 1,
data = "LT_C_ADSIGG_INFO",
geometry = "true",
attribute = "true",
crs = "EPSG:3857",
geomfilter = "BOX(124,33,132,43)",
attrfilter = paste0("sig_kor_nm:like:", URLencode(sgg_name))
)
response <- GET(base_url, query = params)
content <- content(response, "text", encoding = "UTF-8")
content
content
params <- list(
key = api_key,
domain = "https://r2bit.com/BitStat2",
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 1000,
page = 1,
data = "LT_C_ADSIGG_INFO",
geometry = "false",
attribute = "true",
crs = "EPSG:3857",
geomfilter = "BOX(124,33,132,43)",
attrfilter = paste0("sig_kor_nm:like:", URLencode(sgg_name))
)
response <- GET(base_url, query = params)
content <- content(response, "text", encoding = "UTF-8")
content
data <- fromJSON(content, simplifyVector = FALSE)
data
# Vworld API 키 설정
vworld_api_key <- Sys.getenv("VWORLD_API_KEY")
get_sgg_polygon <- function(api_key, sgg_name) {
base_url <- "http://api.vworld.kr/req/data"
params <- list(
key = api_key,
domain = "http://localhost",
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 100,
page = 1,
data = "LT_C_ADSIGG_INFO",
geometry = "true",
attribute = "true",
crs = "EPSG:4326",
geomfilter = "BOX(124,33,132,43)",
attrfilter = paste0("sig_kor_nm:like:", sgg_name)
)
response <- GET(base_url, query = params)
if (http_error(response)) {
stop("Error: Unable to fetch data from Vworld API")
}
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, simplifyVector = FALSE)
# Convert the featureCollection list to a JSON string
feature_collection <- data$response$result$featureCollection
feature_collection_json <- toJSON(feature_collection, auto_unbox = TRUE)
# Convert to sf object directly from the parsed JSON
sf_object <- st_read(feature_collection_json, quiet = TRUE)
return(sf_object)
}
# Usage
sgg_name <- "서구"  # 예시 시군구 이름
sgg_sf <- get_sgg_polygon(vworld_api_key, sgg_name)
get_sgg_polygon <- function(api_key, sgg_name) {
base_url <- "http://api.vworld.kr/req/data"
params <- list(
key = api_key,
domain = "https://r2bit.com/BitStat2",
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 100,
page = 1,
data = "LT_C_ADSIGG_INFO",
geometry = "true",
attribute = "true",
crs = "EPSG:4326",
geomfilter = "BOX(124,33,132,43)",
attrfilter = paste0("sig_kor_nm:like:", sgg_name)
)
response <- GET(base_url, query = params)
if (http_error(response)) {
stop("Error: Unable to fetch data from Vworld API")
}
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, simplifyVector = FALSE)
# Convert the featureCollection list to a JSON string
feature_collection <- data$response$result$featureCollection
feature_collection_json <- toJSON(feature_collection, auto_unbox = TRUE)
# Convert to sf object directly from the parsed JSON
sf_object <- st_read(feature_collection_json, quiet = TRUE)
return(sf_object)
}
# Usage
sgg_name <- "서구"  # 예시 시군구 이름
sgg_sf <- get_sgg_polygon(vworld_api_key, sgg_name)
# 지도에 표시
plot(st_geometry(sgg_sf))
sgg_name <- "속초시"  # 예시 시군구 이름
sgg_sf <- get_sgg_polygon(vworld_api_key, sgg_name)
# 지도에 표시
plot(st_geometry(sgg_sf))
styler:::style_selection()
# Usage example
sgg_name <- "양양군"
sgg_polygon <- get_sgg_polygon(api_key, sgg_name)
# Print the result
print(sgg_polygon)
# Plot the polygon
plot(st_geometry(sgg_polygon), main = paste("Polygon of", sgg_name))
# If you want to use ggplot2 for visualization
library(ggplot2)
ggplot() +
geom_sf(data = sgg_polygon) +
ggtitle(paste("Polygon of", sgg_name)) +
theme_minimal()
# Leaflet 지도에 시군구 폴리곤을 표시하는 함수
display_sgg_on_map <- function(api_key, sgg_name) {
polygon <- get_sgg_polygon(api_key, sgg_name)
map <- leaflet() %>%
addTiles(
urlTemplate = sub("{key}", api_key, vworld_base_url, fixed = TRUE),
attribution = "Vworld"
) %>%
addPolygons(
data = polygon,
fillColor = "blue",
fillOpacity = 0.5,
color = "black",
weight = 2,
label = ~sig_kor_nm
) %>%
fitBounds(
lng1 = st_bbox(polygon)$xmin,
lat1 = st_bbox(polygon)$ymin,
lng2 = st_bbox(polygon)$xmax,
lat2 = st_bbox(polygon)$ymax
)
return(map)
}
# 사용 예시
sgg_name <- "양양군"  # 원하는 시군구 이름을 입력하세요
display_sgg_on_map(vworld_api_key, sgg_name)
# Leaflet 지도에 시군구 폴리곤을 표시하는 함수
display_sgg_on_map <- function(api_key, sgg_name) {
polygon <- get_sgg_polygon(api_key, sgg_name)
map <- leaflet() %>%
addTiles(
urlTemplate = sub("{key}", api_key, vworld_base_url, fixed = TRUE),
attribution = "Vworld"
) %>%
addPolygons(
data = polygon,
fillColor = "blue",
fillOpacity = 0.5,
color = "black",
weight = 2,
label = ~sig_kor_nm
)
return(map)
}
# 사용 예시
sgg_name <- "양양군"  # 원하는 시군구 이름을 입력하세요
display_sgg_on_map(vworld_api_key, sgg_name)
sido_results <- search_adm_districts(api_key, district_type = "sido")
devtools::load_all(".")
sido_results <- search_adm_districts(api_key, district_type = "sido")
sido_results
get_sgg_map <- function(api_key, sgg_code) {
base_url <- "http://api.vworld.kr/req/data"
params <- list(
key = api_key,
domain = "https://r2bit.com/BitStat2",
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 100,
page = 1,
data = "LT_C_ADSIGG_INFO",
geometry = "true",
attribute = "true",
crs = "EPSG:4326",
geomfilter = "BOX(124,33,132,43)",
attrfilter = paste0("sig_kor_nm:=:", sgg_code)
)
response <- GET(base_url, query = params)
if (http_error(response)) {
stop("Error: Unable to fetch data from Vworld API")
}
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, simplifyVector = FALSE)
# Convert the featureCollection list to a JSON string
feature_collection <- data$response$result$featureCollection
feature_collection_json <- toJSON(feature_collection, auto_unbox = TRUE)
# Convert to sf object directly from the parsed JSON
sf_object <- st_read(feature_collection_json, quiet = TRUE)
return(sf_object)
}
sido_results
sido_cd <- search_adm_districts(api_key, district_type = "sido")
sido_raw <- sido_cd |>
mutate(data = map(code, get_sgg_map, api_key = vworld_api_key))
conflicted::conflicts_prefer(purrr::map)
sido_raw <- sido_cd |>
mutate(data = map(code, get_sgg_map, api_key = vworld_api_key))
styler:::style_selection()
get_sido_polygon <- function(api_key, sido_name) {
base_url <- "http://api.vworld.kr/req/data"
params <- list(
key = api_key,
domain = "https://r2bit.com/BitStat2",
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 1000,
page = 1,
data = "LT_C_ADSIDO_INFO",
geometry = "true",
attribute = "true",
crs = "EPSG:4326",
geomfilter = "BOX(124,33,132,43)",
attrfilter = paste0("ctp_kor_nm:like:", sido_name)
)
response <- GET(base_url, query = params)
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, simplifyVector = FALSE)
# Convert the featureCollection list to a JSON string
feature_collection <- data$response$result$featureCollection
feature_collection_json <- toJSON(feature_collection, auto_unbox = TRUE)
# Convert to sf object directly from the parsed JSON
sf_object <- st_read(feature_collection_json, quiet = TRUE)
return(sf_object)
}
# Usage
sido_name <- "광주광역시"
sigo_sf <- get_sido_polygon(vworld_api_key, sido_name)
plot(st_geometry(sigo_sf))
get_sido_map <- function(api_key, sido_code) {
base_url <- "http://api.vworld.kr/req/data"
params <- list(
key = api_key,
domain = "https://r2bit.com/BitStat2",
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 1000,
page = 1,
data = "LT_C_ADSIDO_INFO",
geometry = "true",
attribute = "true",
crs = "EPSG:4326",
geomfilter = "BOX(124,33,132,43)",
attrfilter = paste0("ctp_kor_cd:=:", sido_code)
)
response <- GET(base_url, query = params)
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, simplifyVector = FALSE)
# Convert the featureCollection list to a JSON string
feature_collection <- data$response$result$featureCollection
feature_collection_json <- toJSON(feature_collection, auto_unbox = TRUE)
# Convert to sf object directly from the parsed JSON
sf_object <- st_read(feature_collection_json, quiet = TRUE)
return(sf_object)
}
sido_raw <- sido_cd |>
mutate(data = map(code, get_sgg_map, api_key = vworld_api_key))
library(leaflet)
library(sf)
district_type <- "sido"
api_key  <- Sys.getenv("VWORLD_API_KEY")
base_url <- "https://api.vworld.kr/req/data"
params <- list(
key = api_key,
domain = "https://r2bit.com/BitStat2",
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 1000,
page = 1,
geometry = "true",
attribute = "true",
crs = "EPSG:4326",  # WGS84 coordinate system
data = "LT_C_ADSIDO_INFO",
geomFilter = "BOX(124,33,132,43)"  # Bounding box for South Korea
)
res <- GET(base_url, query = params)
content_json <- content(res, "text", encoding = "UTF-8") |>
fromJSON()
sido_df <- content_json$response$result$featureCollection$features |>
as_tibble()
sido_df
sido_df
get_sido_map <- function(api_key, sido_code) {
base_url <- "http://api.vworld.kr/req/data"
params <- list(
key = api_key,
domain = "https://r2bit.com/BitStat2",
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 1000,
page = 1,
data = "LT_C_ADSIDO_INFO",
geometry = "true",
attribute = "true",
crs = "EPSG:4326",
geomfilter = "BOX(124,33,132,43)",
attrfilter = paste0("ctprvn_cd:=:", sido_code)
)
response <- GET(base_url, query = params)
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, simplifyVector = FALSE)
# Convert the featureCollection list to a JSON string
feature_collection <- data$response$result$featureCollection
feature_collection_json <- toJSON(feature_collection, auto_unbox = TRUE)
# Convert to sf object directly from the parsed JSON
sf_object <- st_read(feature_collection_json, quiet = TRUE)
return(sf_object)
}
get_sgg_map(api_key, 11)
get_sido_map(api_key, "11")
sido_raw <- sido_cd |>
mutate(data = map(code, get_sido_map, api_key = vworld_api_key))
sido_raw
View(sido_raw)
str(sido_raw)
get_sido_map <- function(api_key, sido_code) {
base_url <- "http://api.vworld.kr/req/data"
params <- list(
key = api_key,
domain = "https://r2bit.com/BitStat2",
service = "data",
version = "2.0",
request = "getfeature",
format = "json",
size = 1000,
page = 1,
data = "LT_C_ADSIDO_INFO",
geometry = "true",
attribute = "true",
crs = "EPSG:4326",
geomfilter = "BOX(124,33,132,43)",
attrfilter = paste0("ctprvn_cd:=:", sido_code)
)
response <- GET(base_url, query = params)
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, simplifyVector = FALSE)
# Convert the featureCollection list to a JSON string
feature_collection <- data$response$result$featureCollection
feature_collection_json <- toJSON(feature_collection, auto_unbox = TRUE)
# Convert to sf object directly from the parsed JSON
sf_object <- st_read(feature_collection_json, quiet = TRUE)
return(sf_object |> st_geometry())
}
get_sido_map(vworld_api_key, "11") |> plot()
get_sido_map(vworld_api_key, "11")
sido_raw <- sido_cd |>
mutate(data = map(code, get_sido_map, api_key = vworld_api_key))
sido_raw
sido_raw |>
ggplot() +
geom_sf()
names(sido_raw)
sido_raw |>
unest(data)
sido_raw |>
unnest(data)
sido_raw |>
unnest(data) |>
ggplot() +
geom_sf(aes(geometry = data))
sido_sf <- sido_raw |>
unnest(data) |>
rename(geometry = data)
sido_sf |>
st_write("inst/extdata/sido_sf.geojson")
